Insertion of an array at the specific position

Code->

#include <bits/stdc++.h>
using namespace std;

int *insertX(int n, int x, int pos, int arr[]){
    n++;
    for(int i=n; i>=pos; i--){
        arr[i]=arr[i-1];
    }
    arr[pos-1]=x;
    return arr;
}

int main(){
    cout<<"Enter the size of an array:"<<endl;
    int n;
    cin>>n;
    cout<<"Enter the array elements:"<<endl;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    int x,pos;
    cout<<"Enter the element and position:"<<endl;
    cin>>x>>pos;
    for(int i=0; i<n; i++){
        arr[i]=i+1;
    }
    cout<<"Initial array:"<<endl;
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    insertX(n,x,pos,arr);
    cout<<"Updated array:"<<endl;
    for(int i=0; i<n+1; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}

-----------------------------------------------------
-----------------------------------------------------

Insertion at the beginning-:

Code->

#include <bits/stdc++.h>
using namespace std;

int *insertX(int n, int x, int pos, int arr[]){
    n++;
    for(int i=n; i>=0; i--){
        arr[i]=arr[i-1];
    }
    arr[0]=x;
    return arr;
}

int main(){
    cout<<"Enter the size of an array:"<<endl;
    int n;
    cin>>n;
    cout<<"Enter the array elements:"<<endl;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    int x,pos;
    cout<<"Enter the element:"<<endl;
    cin>>x;
    for(int i=0; i<n; i++){
        arr[i]=i+1;
    }
    cout<<"Initial array:"<<endl;
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    insertX(n,x,pos,arr);
    cout<<"Updated array:"<<endl;
    for(int i=0; i<n+1; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}

------------------------------------------
------------------------------------------
Insertion of an array at the end

Code->

#include <bits/stdc++.h>
using namespace std;

int insertX(int n, int x, int capacity, int arr[]){
    if(n>=capacity){
        return n;
    }
    // n++;
    // for(int i=n; i>=0; i--){
    //     arr[i]=arr[i-1];
    // }
    arr[n]=x;
    return (n+1);
}

int main(){
    cout<<"Enter the size of an array:"<<endl;
    int n;
    cin>>n;
    cout<<"Enter the array elements:"<<endl;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    int x,pos;
    cout<<"Enter the element:"<<endl;
    cin>>x;
    for(int i=0; i<n; i++){
        arr[i]=i+1;
    }
    cout<<"Initial array:"<<endl;
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    insertX(n,x,pos,arr);
    cout<<"Updated array:"<<endl;
    for(int i=0; i<n+1; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}

-------------------------------------------
-------------------------------------------
Selection Sort (No of swaps and sorting)

Code->
#include <bits/stdc++.h>
using namespace std;
void selectionSort(int n,int a[]){
    int cnt=0;
    for(int i=0; i<n-1; i++){
        for(int j=i+1; j<n; j++){
            if(a[j]<a[i]){
                int temp= a[j];
                a[j]=a[i];
                a[i]=temp;
                cnt++;
            }
        }
    }
    cout<<"No of swaps:"<<endl;
    cout<<cnt<<endl;
}
int main(){
    int n;
    cin>>n;
    int a[n];
    for(int i=0; i<n; i++){
        cin>>a[i];
    }
    selectionSort(n, a);
    cout<<"Sorted array:"<<endl;
    for(int i=0; i<n; i++){
        cout<<a[i]<<" ";
    }
    return 0;
}

---------------------------------------
---------------------------------------
Bubble Sort

Code->

#include <bits/stdc++.h>
using namespace std;
void bubble(int n, int arr[]){
    int cnt=1;
    for(int i=0; i<n-1; i++){
        for(int j=0; j<n-i-1; j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j], arr[j+1]);
                cnt++;
            }
        }
    }
    cout<<"No of swaps:"<<endl;
    cout<<cnt<<endl;
}
int main(){
    int n;
    cin>>n;
    int a[n];
    for(int i=0; i<n; i++){
        cin>>a[i];
    }
    bubble(n, a);
    cout<<"Sorted array:"<<endl;
    for(int i=0; i<n; i++){
        cout<<a[i]<<" ";
    }
    return 0;
}

----------------------OR--------------------
#include <bits/stdc++.h>
using namespace std;
void bubble(int n, int arr[]){
    int cnt=0;
    for(int i=0; i<n-1; i++){
        for(int j=0; j<n-i-1; j++){
            if(arr[j]>arr[j+1]){
                int temp= arr[j+1];
                arr[j+1]=arr[j];
                arr[j]=temp;
                cnt++;
            }
        }
    }
    cout<<"No of swaps:"<<endl;
    cout<<cnt<<endl;
}
int main(){
    int n;
    cin>>n;
    int a[n];
    for(int i=0; i<n; i++){
        cin>>a[i];
    }
    bubble(n, a);
    cout<<"Sorted array:"<<endl;
    for(int i=0; i<n; i++){
        cout<<a[i]<<" ";
    }
    return 0;
}

--------------------------------------------
--------------------------------------------
Insertion Sort

Code->

#include <bits/stdc++.h>
using namespace std;
void insertion(int n, int arr[]){
    int cnt=0;
   for(int i=1; i<n; i++){
   int temp= arr[i];
   int j=i-1;
   while(j>=0 && arr[j]>temp){
       arr[j+1]=arr[j];
       j--;
       cnt++;
   }
   arr[j+1]=temp;
}
   cout<<"No of swaps: "<<cnt<<endl;
}
   
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    insertion(n, arr);
    cout<<"Sorted array:"<<endl;
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}

-------------------------------------------
-------------------------------------------
Deletion in an array

Code->
#include <bits/stdc++.h>
using namespace std;

int main(){
    cout<<"Enter the size of an array: "<<endl;
    int n;
    cin>>n;
    cout<<"Enter your array: "<<endl;
    int a[n];
    for(int i=0; i<n; i++){
        cin>>a[i];
    }
    int pos;
    cout<<"Enter the position to be deleted: "<<endl;
    cin>>pos;
    for(int i=pos; i<n; i++){
        a[i]=a[i+1];
    }
    cout<<"Final array: "<<endl;
    for(int i=0; i<n-1; i=i+1){
        cout<<a[i]<<" ";
    }
    return 0;
}
---------------------------------------
---------------------------------------

Stack using array

Code->

#include <bits/stdc++.h>
using namespace std;

#define size 5

int a[size];
int top=-1;

bool isEmpty(){
    if(top==-1)
        return true;
    else
        return false;
}

void push(int value){
    if (top==size-1){
        cout<<"Stack is full"<<endl;
    }
    else{
        top++;
        a[top]= value;
    }
}

void pop(){
    if(isEmpty()){
        cout<<"Stack is empty"<<endl;
    }
    else{
        top--;
    }
}

void show_top()
{
 if(isEmpty())
  cout<<"Stack is empty!\n";
 else
  cout<<"Element at top is: "<<a[top]<<"\n";
}

void displayStack()
{
  if(isEmpty())
 {
    cout<<"Stack is empty!\n";
 }
 else
 {
  for(int i=0 ; i<=top; i++)
    cout<<a[i]<<" ";
   cout<<"\n";
  }
}
  
  int main(){
      int choice, flag=1, value;
      while(flag==1){
          cout<<"\n1.PUSH 2.POP 3.SHOW_TOP 4.DISPLAY_STACK 5.EXIT\n";
          cin>>choice;
          switch (choice){
              case 1: cout<<"Enter Value:\n";
         cin>>value;
         push(value);
         break;
 case 2: pop();
         break;
 case 3: show_top();
         break;
 case 4: displayStack();
         break;
 case 5: flag = 0;
         break;
          }
      }
      return 0;
  }

-----------------------------------------------
-----------------------------------------------
Stack infix to postfix conversion
#include <bits/stdc++.h>
using namespace std;

int prec(char c){
    if(c=='^'){
        return 3;
    }
    if(c=='/' || c=='*'){
        return 2;
    }
    if(c=='+'|| c=='-'){
        return 1;
    }
    else{
        return -1;
    }
}

void itop(string s){
    stack <char> st;
    string res;
    
    for(int i=0; i<s.length(); i++){
        char c= s[i];
        
        if((c>='a' && c<='z') || (c>='A' && c<='Z') || (c>='0' && c<='9'))
        res+=c;
        
        else if (c=='('){
            st.push('(');
        }
        
        else if(c==')'){
            while(st.top()!='('){
                res+=st.top();
                st.pop();
            }
            st.pop();
        }
        
        else{
            while(!st.empty() && prec(s[i])<=prec(st.top())){
                res+=st.top();
                st.pop();
            }
            st.push(c);
        }
    }
        while (!st.empty()) {
        res += st.top();
        st.pop();
    }
 
    cout << res << endl;

}
    
int main(){
    string str="a+b*(c^d-e)^(f+g*h)-i";
    itop(str);
    return 0;
}
-----------------------------------------
-----------------------------------------
Queue implementation using stl

Code->
#include <bits/stdc++.h>
using namespace std;

int main(){
    queue <int> q;
    q.push(11);
    cout<<q.front()<<endl;
    q.push(15);
    q.push(13);
    cout<<"size of queue is: "<<q.size()<<endl;
    q.pop();
    cout<<"size of queue is: "<< q.size()<<endl;
    if(q.empty()){
        cout<<"queue is empty"<<endl;
    }
    else{
        cout<<"queue is not empty"<<endl;
    }
    return 0;
}

-------------------------------------------------
-------------------------------------------------
Linked List Insertion

Code->
#include <bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node *next;
    
    node (int value){
        data=value;
        next=NULL;
    }
};

void insertathead(node *&head, int val){
    node *n= new node(val);
    n->next= head;
    head= n;
}

void insertafter(node *head, int key, int val){
    node * n = new node(val);
    if(key== head->data){
        n->next= head->next;
        head->next=n;
        return;
    }
    
    node* temp = head;
    while (temp->data != key) {
        temp = temp->next;
        if (temp == NULL) {
            return;
        }
    }
    n->next = temp->next;
    temp->next = n;
}

void insertattail(node *&head, int val){
    node *n= new node(val);
    if(head==NULL){
        head=n;
        return;
    }
    
    node *temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}

void print(node*& head)
{
    node* temp = head;
 
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

int main()
{
 
    // Declaring an empty linked list
    node* head = NULL;
 
    insertathead(head, 1);
    insertathead(head, 2);
    cout << "After insertion at head: ";
    print(head);
    cout << endl;
 
    insertattail(head, 4);
    insertattail(head, 5);
    cout << "After insertion at tail: ";
    print(head);
    cout << endl;
 
    insertafter(head, 1, 2);
    insertafter(head, 5, 6);
    cout << "After insertion at a given position: ";
    print(head);
    cout << endl;
 
    return 0;
}
--------------------------------------------------------
--------------------------------------------------------
Q1. Tuition Class Marks Performance
In a Tuition class of 10 students, 4 to 5 students scored similar marks. 
The arrays of marks have to be taken and marks to be initialized at the beginning itself in the array declaration.
 Make a function to show the marks which are unmatched. The marks to be displayed once in the output.


#include<bits/stdc++.h>
using namespace std;

int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    cout<<"Original array: "<<endl;
    
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    
    sort(arr, arr+n);
    for(int i=0; i<n; i++){
        if(arr[i]!=arr[i+1]){
            cout<<arr[i]<<" ";
        }
    }
    return 0;
}

---------------------------------------
---------------------------------------
Valid parentheses

Code->
#include <bits/stdc++.h>
using namespace std;
 
// Function to check if brackets are balanced
bool areBracketsBalanced(string expr)
{
    // Declare a stack to hold the previous brackets.
    stack<char> temp;
    for (int i = 0; i < expr.length(); i++) {
        if (temp.empty()) {
             
            // If the stack is empty
            // just push the current bracket
            temp.push(expr[i]);
        }
        else if ((temp.top() == '(' && expr[i] == ')')
                 || (temp.top() == '{' && expr[i] == '}')
                 || (temp.top() == '[' && expr[i] == ']')) {
             
            // If we found any complete pair of bracket
            // then pop
            temp.pop();
        }
        else {
            temp.push(expr[i]);
        }
    }
    if (temp.empty()) {
         
        // If stack is empty return true
        return true;
    }
    return false;
}
 
// Driver code
int main()
{
    string expr = "{()}[]";
 
    // Function call
    if (areBracketsBalanced(expr))
        cout << "Balanced";
    else
        cout << "Not Balanced";
    return 0;
}
-----------------------------------------
-----------------------------------------
DFS and BFS
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void bfs(vector<int> &vis,vector<int>*adj,int element){
    queue<int> qt;
    qt.push(element);
    vis[element]=1;
    while(!qt.empty()){
        int front=qt.front();
        qt.pop();
        cout<<front<<" ";
        for(auto it:adj[front]){
            if(vis[it]==0){
                qt.push(it);
                vis[it]=1;
            }
        }

    }
}
void dfs(vector<int> &vis2,vector<int> *adj,int element,vector<int> &ans){
    vis2[element]=1;
    ans.push_back(element);
    for(auto it:adj[element]){
        if(vis2[it]==0){
            dfs(vis2,adj,it,ans);
        }
    }
}

int main(){
    int n;
    cin>>n;
    vector<int> adj[n];
    int m;
    cin>>m;
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);

    }
    vector<int> vis(n,0);
    bfs(vis,adj,0);
    vector<int> vis2(n,0);
    vector<int> ans;
    dfs(vis2,adj,0,ans);
    cout<<endl;
    for(auto it:ans){
        cout<<it<<" ";
    }

    
    return 0;
}
-------------------------------------------
-------------------------------------------
#include <iostream>
using namespace std;

int binarySearch(int array[], int x, int low, int high) {
  
	// Repeat until the pointers low and high meet each other
  while (low <= high) {
    int mid = low + (high - low) / 2;

    if (array[mid] == x)
      return mid;

    if (array[mid] < x)
      low = mid + 1;

    else
      high = mid - 1;
  }

  return -1;
}

int main(void) {
  int array[] = {3, 4, 5, 6, 7, 8, 9};
  int x = 4;
  int n = sizeof(array) / sizeof(array[0]);
  int result = binarySearch(array, x, 0, n - 1);
  if (result == -1)
    printf("Not found");
  else
    printf("Element is found at index %d", result);
}
 ------------------------------------
 ------------------------------------
 Merge two arrays
 
 #include<iostream>
using namespace std;
int main()
{
    int arrOne[50], arrTwo[50], arrMerge[100];
	int sizeOne, sizeTwo, i, k;
    cout<<"Enter the Size for First Array: ";
    cin>>sizeOne;
    cout<<"Enter "<<sizeOne<<" Elements for First Array: ";
    for(i=0; i<sizeOne; i++)
    {
        cin>>arrOne[i];
        arrMerge[i] = arrOne[i];
    }
    k = i;
    cout<<"\nEnter the Size for Second Array: ";
    cin>>sizeTwo;
    cout<<"Enter "<<sizeTwo<<" Elements for Second Array: ";
    for(i=0; i<sizeTwo; i++)
    {
        cin>>arrTwo[i];
        arrMerge[k] = arrTwo[i];
        k++;
    }
    cout<<"\nThe New Array (Merged Array):\n";
    for(i=0; i<k; i++)
        cout<<arrMerge[i]<<" ";
    cout<<endl;
    return 0;
}

